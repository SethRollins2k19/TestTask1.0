{"version":3,"sources":["components/style/DataCircleItemStyle.module.css","components/DataCircleItem.js","components/DataCircle.js","components/DataCircleContainer.js","actions/CircleActions.js","App.js","serviceWorker.js","index.js","reducer/rootReducer.js","components/style/DataCircleStyle.module.css"],"names":["module","exports","DataCircleItemComponent","item","leftMove","topMove","parentNode","getBoundingClientRect","width","height","centerX","centerY","leftDir","topDir","timer","setInterval","handelTimer","x","offsetLeft","y","offsetTop","itemWidth","offsetWidth","itemHeight","offsetHeight","isInCircle","temp","style","left","top","addEventListener","clearInterval","Animation","document","querySelector","this","props","index","Math","floor","random","title","link","filled","href","className","CircleItem","CircleShape","CircleItemBlack","CircleWrapperText","CircleText","React","Component","CenterX","CenterY","X","Y","Radius","sqrt","pow","connect","state","dispatch","changeCount","newCount","type","getItems","axios","get","then","res","items","data","useSelector","length","maxCount","useState","count","setCount","Wrapper","Circle","map","key","value","onChange","e","Number","target","Input","onClick","App","DataCircleContainer","Boolean","window","location","hostname","match","store","createStore","action","applyMiddleware","middleWareThunk","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1e539af3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CircleItem\":\"DataCircleItemStyle_CircleItem__2_twe\",\"CircleShape\":\"DataCircleItemStyle_CircleShape__204Js\",\"CircleWrapperText\":\"DataCircleItemStyle_CircleWrapperText__3quRa\",\"CircleText\":\"DataCircleItemStyle_CircleText__TvTup\",\"CircleItemBlack\":\"DataCircleItemStyle_CircleItemBlack__3lFSJ\",\"Circle\":\"DataCircleItemStyle_Circle__3cBZB\",\"spinReverse\":\"DataCircleItemStyle_spinReverse__2y87E\"};","import React from \"react\";\r\nimport style from \"./style/DataCircleItemStyle.module.css\"\r\n\r\nexport default class DataCircleItemComponent extends React.Component {\r\n\r\n\r\n    componentDidMount() {\r\n        let item = document.querySelector(`.circleItem-${this.props.index}`)\r\n        let leftMove = Math.floor(Math.random()*90 - 45)\r\n        let topMove = Math.floor(Math.random()*90 - 45)\r\n        Animation(item,leftMove,topMove)\r\n    }\r\n\r\n    render() {\r\n        const{title = \"\", link = \"#\", filled = false} = this.props.item;\r\n        return (\r\n            <a href={link} className={`${style.CircleItem} circleItem-${this.props.index}`} >\r\n                <div className={`${style.CircleShape}  ${filled ? style.CircleItemBlack : \"\"}`}>\r\n                </div>\r\n                <div className={style.CircleWrapperText}>\r\n                    <div className={style.CircleText}>\r\n                        {title}\r\n                    </div>\r\n                </div>\r\n            </a>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Animation(item,leftMove = 45,topMove = 45) {\r\n    let {width, height} = item.parentNode.getBoundingClientRect();\r\n\r\n    let centerX = width/2;\r\n    let centerY = height/2;\r\n    let leftDir = !leftMove;\r\n    let topDir = !topMove;\r\n    let timer = setInterval(handelTimer,130)\r\n    item.addEventListener('mouseover',()=>{\r\n        clearInterval(timer)\r\n    })\r\n    item.addEventListener('mouseout',()=>{\r\n        timer = setInterval(handelTimer,130)\r\n    })\r\n    function handelTimer(){\r\n        let x = item.offsetLeft;\r\n        let y = item.offsetTop;\r\n        let itemWidth = item.offsetWidth;\r\n        let itemHeight = item.offsetHeight;\r\n        if(!leftDir){\r\n            if(isInCircle(centerX,centerY,(x + leftMove + itemWidth),(y - topMove - itemHeight ))){\r\n                let temp = x + leftMove;\r\n                item.style.left = temp + \"px\";\r\n            } else {\r\n                leftDir = !leftDir;\r\n            }\r\n        } else {\r\n            if(isInCircle(centerX,centerY,(x - leftMove + itemWidth),(y - topMove - itemHeight ))){\r\n                let temp = x - leftMove;\r\n                item.style.left = temp + \"px\";\r\n            } else {\r\n                leftDir = !leftDir;\r\n            }\r\n        }\r\n        if (!topDir) {\r\n            if (isInCircle(centerX, centerY, (x + leftMove + itemWidth), (y + topMove + itemHeight))) {\r\n                let temp = y + topMove;\r\n                item.style.top = temp + \"px\";\r\n            } else {\r\n                topDir = !topDir;\r\n            }\r\n        } else {\r\n            if (isInCircle(centerX, centerY, (x + leftMove + itemWidth), (y - topMove + itemHeight))) {\r\n                let temp = y - topMove;\r\n                item.style.top = temp + \"px\";\r\n            } else {\r\n                topDir = !topDir;\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\nfunction isInCircle(CenterX,CenterY,X,Y,Radius = CenterX){\r\n    let temp = Math.sqrt((Math.pow((X - CenterX),2) + Math.pow((Y - CenterY),2)));\r\n    return temp<Radius&&temp > 0;\r\n}","import React, {useState} from \"react\";\r\nimport style from './style/DataCircleStyle.module.css'\r\nimport DataCircleItemComponent from \"./DataCircleItem\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nexport const DataCircleComponent = ({changeCount,getItems}) =>{\r\n    let items = useSelector(state=>state.items);\r\n    if(items.length === 0){\r\n        getItems()\r\n    }\r\n    let maxCount = useSelector(state => state.maxCount);\r\n    const [count,setCount] = useState(maxCount)\r\n        return(\r\n            <div className={style.Wrapper}>\r\n                <div className={`${style.Circle}`}>\r\n                    {items.map((item, index) => {\r\n                        if(index<maxCount) {\r\n                            return (\r\n                                <DataCircleItemComponent key={index} item={item} index={index}/>\r\n                            )\r\n                        } else {\r\n                            return \"\"\r\n                        }\r\n                    })}\r\n                    <DataCircleItemComponent item={\r\n                        {title: \"Google\", link: \"https://google.com\", filled: false}\r\n                    }/>\r\n                </div>\r\n                <input type=\"text\" value={count} onChange={(e)=>{\r\n                    if(Number(e.target.value) <1000){\r\n                        setCount(e.target.value)\r\n                    }}} className={style.Input}/>\r\n                    <button onClick={()=>changeCount(Number(count))}>change count</button>\r\n            </div>\r\n        )\r\n}","import {changeCount, getItems} from \"../actions/CircleActions\";\r\nimport {connect} from \"react-redux\";\r\nimport {DataCircleComponent} from \"./DataCircle\";\r\nconst mapStateToProps = state => {\r\n    return {\r\n\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch =>{\r\n    return {\r\n        changeCount: (newCount) => dispatch(changeCount(newCount)),\r\n        getItems: () => dispatch(getItems())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(DataCircleComponent)","import axios from \"axios\";\r\n\r\nexport const getItems = () => dispatch =>{\r\n    axios.get('http://www.json-generator.com/api/json/get/bSanYokNVe?indent=2')\r\n        .then(res =>{\r\n            dispatch({\r\n                type: \"GET_ITEMS\",\r\n                items: res.data.items\r\n            })\r\n        })\r\n}\r\nexport const changeCount = (newCount) => dispatch => {\r\n    dispatch({type: \"CHANGE_COUNT\",newCount})\r\n}","import React from 'react';\nimport './App.css';\nimport DataCircleContainer from \"./components/DataCircleContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <DataCircleContainer/>\n        <div>\n\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\"\nimport {createStore,applyMiddleware} from \"redux\"\nimport middleWareThunk from \"redux-thunk\"\nimport {RootReducer} from \"./reducer/rootReducer\";\n\nconst store = createStore(RootReducer,applyMiddleware(middleWareThunk))\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </Provider>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n","export const RootReducer = (state={\r\n    items: [],\r\n    maxCount: 1\r\n},action) => {\r\n    switch (action.type) {\r\n        case \"GET_ITEMS\":{\r\n            return {\r\n                ...state,\r\n                items: action.items,\r\n            }\r\n        }\r\n        case \"CHANGE_COUNT\": {\r\n            return {\r\n                ...state,\r\n                maxCount: action.newCount\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"DataCircleStyle_Wrapper__2S239\",\"Circle\":\"DataCircleStyle_Circle__1QAzZ\",\"Input\":\"DataCircleStyle_Input__CZ9Yz\",\"spin\":\"DataCircleStyle_spin__1veeJ\"};"],"sourceRoot":""}